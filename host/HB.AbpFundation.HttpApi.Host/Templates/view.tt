<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\\Windows\System32\\CodeSmithCore.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeSmithCore" #>
<#@ parameter type="String" name="ModuleName" #>
<#@ parameter type="String" name="FunctionName" #>
<#@ parameter type="PersistenceObjectInfo" name="Entity" #>
<#@ output extension=".vue" #>

<template>
  <el-descriptions  :column="2" :size="size" border :labelStyle="{width:'120px'}">
<# foreach(var property in Entity.Properties){ #>  
    <el-descriptions-item label="<#=property.Comment #>" >
        {{record.<#=property.NameVar #>}}
    </el-descriptions-item>
<#}#>    
  </el-descriptions>
</template>
<script>
import { EmptyGuid } from '@/utils/guid'
import { get<#=Entity.AggregationName #>,create<#=Entity.AggregationName #>,update<#=Entity.AggregationName #> } from '@/api/<#=StringUtils.GetCamelCaseVar(ModuleName) #>/<#=StringUtils.GetCamelCaseVar(FunctionName) #>/<#=Entity.AggregationVar #>.js'

export default {
  components: {  },
  props: {
    id: {
      type: String,
      default:null
    }
  },
  data() {
    return {
      model: {
        id: '',
<# foreach(var property in Entity.Properties){ #>  
        <#=property.NameVar #>: '',
<#}#>
      }
    }
  },
  watch: {
    id: {
      handler() {
        this.loadData();
      },
      immediate: true
    }
  },
  methods: {
      loadData(){
        if(!this.id){
            return ;
        }
        let input ={
            id:this.id,
            readOnly:true
        };
        get<#=Entity.AggregationName #>(input).then(res=>{
            if(res.code == 0){
                this.model = Object.assign({},this.model,res.data);
            }
        })
    }
  }
}
</script>
